import streamlit as st
import pandas as pd
import pickle
import os
import plotly.express as px
import plotly.graph_objects as go

# Set page configuration
st.set_page_config(
    page_title="–¢–µ–ª–µ–∫–æ–º –ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Custom CSS to improve the UI
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #0D47A1;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .feature-section {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    .results-card {
        background-color: #e3f2fd;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-top: 1.5rem;
    }
    .high-risk {
        background-color: #ffebee;
        color: #c62828;
        padding: 1rem;
        border-radius: 5px;
        font-weight: bold;
        text-align: center;
    }
    .low-risk {
        background-color: #e8f5e9;
        color: #2e7d32;
        padding: 1rem;
        border-radius: 5px;
        font-weight: bold;
        text-align: center;
    }
    .footer {
        text-align: center;
        margin-top: 3rem;
        color: #616161;
        font-size: 0.8rem;
    }
    .slider-label {
        color: #424242;
        font-weight: 500;
    }
    .stSlider {
        padding-top: 1rem;
        padding-bottom: 2rem;
    }
</style>
""", unsafe_allow_html=True)

# Header
st.markdown("<h1 class='main-header'>–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤</h1>", unsafe_allow_html=True)
st.markdown("""
<p style='text-align: center; font-size: 1.2rem;'>
    –¶–µ–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –≤–∏—è–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤, —è–∫—ñ –º–æ–∂—É—Ç—å –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥–∞–º–∏ —Ç–µ–ª–µ–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó.
</p>
""", unsafe_allow_html=True)

# Sidebar for context and instructions
with st.sidebar:
    st.image("https://img.icons8.com/fluency/96/000000/phone-office.png")
    st.title("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
    st.info("""
    ### –ü—Ä–æ –¥–æ–¥–∞—Ç–æ–∫
    –¶–µ–π –¥–æ–¥–∞—Ç–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ó—Ö –¥–∞–Ω–∏—Ö.
    
    ### –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏
    1. –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ —É —Ñ–æ—Ä–º—É
    2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ó–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑"
    3. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    
    ### –§—É–Ω–∫—Ü—ñ—ó
    - –ü—Ä–æ–≥–Ω–æ–∑ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –≤—ñ–¥—Ç–æ–∫—É
    - –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ —Ñ–∞–∫—Ç–æ—Ä—ñ–≤
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ —É—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
    """)
    
    st.markdown("---")
    st.markdown("### –ö–æ–Ω—Ç–∞–∫—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏")
    st.markdown("üìß support@telecom.com")
    st.markdown("‚òéÔ∏è +380 44 123 45 67")

# Function to load model
@st.cache_resource
def load_model():
    # Check if model exists, for this demo we'll create a simple placeholder
    if not os.path.exists('models/churn_model.pkl'):
        # Create models directory if it doesn't exist
        os.makedirs('models', exist_ok=True)
        
        # Create a simple placeholder model for demo purposes
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        
        # Save placeholder model
        with open('models/churn_model.pkl', 'wb') as f:
            pickle.dump(model, f)
    
    # Load model
    with open('models/churn_model.pkl', 'rb') as f:
        model = pickle.load(f)
    
    return model

# Load model
try:
    model = load_model()
except Exception as e:
    st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å: {e}")
    model = None

# Main app content
tab1, tab2 = st.tabs(["üìã –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è", "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞"])

with tab1:
    st.markdown("<h2 class='sub-header'>–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞</h2>", unsafe_allow_html=True)
    
    # Create a form with 3 columns layout for better organization
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("<div class='feature-section'>", unsafe_allow_html=True)
        st.subheader("–ü–æ—Å–ª—É–≥–∏")
        is_tv_subscriber = st.checkbox("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–í", value=False)
        is_movie_package_subscriber = st.checkbox("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫—ñ–Ω–æ–ø–∞–∫–µ—Ç", value=False)
        subscription_age = st.slider("–í—ñ–∫ –ø—ñ–¥–ø–∏—Å–∫–∏ (–º—ñ—Å—è—Ü—ñ–≤)", min_value=0, max_value=24, value=12, step=1)
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("<div class='feature-section'>", unsafe_allow_html=True)
        st.subheader("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
        bill_avg = st.slider("–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ (–≥—Ä–Ω)", min_value=0, max_value=100, value=25)
        download_avg = st.slider("–°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–ú–±—ñ—Ç/—Å)", min_value=0.0, max_value=30.0, value=8.0, step=0.1)
        upload_avg = st.slider("–°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–ú–±—ñ—Ç/—Å)", min_value=0.0, max_value=10.0, value=2.0, step=0.1)
        download_over_limit = st.checkbox("–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", value=False)
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("<div class='feature-section'>", unsafe_allow_html=True)
        st.subheader("–ö–æ–Ω—Ç—Ä–∞–∫—Ç —ñ —Å–µ—Ä–≤—ñ—Å")
        reamining_contract = st.slider("–ó–∞–ª–∏—à–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (—Ä–æ–∫—ñ–≤)", min_value=0, max_value=5, value=2, step=1)
        service_failure_count = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–æ—ó–≤ —Å–µ—Ä–≤—ñ—Å—É", min_value=0, max_value=10, value=0)
        st.markdown("</div>", unsafe_allow_html=True)
    
    # Prediction button
    predict_btn = st.button("–ó–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", type="primary", use_container_width=True)
    
    # Make prediction when button is clicked
    if predict_btn:
        if model:
            # Prepare feature data
            features = {
                'is_tv_subscriber': 1 if is_tv_subscriber else 0,
                'is_movie_package_subscriber': 1 if is_movie_package_subscriber else 0,
                'subscription_age': subscription_age,
                'bill_avg': bill_avg,
                'reamining_contract': reamining_contract,
                'service_failure_count': service_failure_count,
                'download_avg': download_avg,
                'upload_avg': upload_avg,
                'download_over_limit': 1 if download_over_limit else 0
            }
            
            # Create DataFrame with the same structure as training data
            input_df = pd.DataFrame([features])
            
            # For demo purposes only - random prediction
            # In production, this would use the actual trained model
            # prediction = model.predict(input_df)[0]
            # probability = model.predict_proba(input_df)[0][1]
            
            # Placeholder for demo - using logic based on important features
            if reamining_contract > 0.8 and is_tv_subscriber:
                prediction = 0
                probability = 0.2
            elif service_failure_count > 2 and reamining_contract < 0.3:
                prediction = 1
                probability = 0.8
            else:
                # Use some simple heuristics to generate a probability
                base_prob = 0.5
                factors = [
                    -0.3 if is_tv_subscriber else 0,
                    -0.2 if is_movie_package_subscriber else 0,
                    -0.01 * subscription_age,
                    0.005 * bill_avg,
                    -0.5 * reamining_contract,
                    0.05 * service_failure_count,
                    -0.01 * download_avg,
                    -0.01 * upload_avg,
                    0.1 if download_over_limit else 0
                ]
                probability = base_prob + sum(factors)
                probability = max(min(probability, 0.95), 0.05)  # Keep between 0.05 and 0.95
                prediction = 1 if probability > 0.5 else 0
            
            # Display prediction results in a nice card
            st.markdown("<div class='results-card'>", unsafe_allow_html=True)
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è")
            
            cols = st.columns([2, 3])
            with cols[0]:
                # Risk gauge
                fig = go.Figure(go.Indicator(
                    mode="gauge+number",
                    value=probability * 100,
                    domain={'x': [0, 1], 'y': [0, 1]},
                    title={'text': "–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É (%)"},
                    gauge={
                        'axis': {'range': [0, 100]},
                        'bar': {'color': "darkblue"},
                        'steps': [
                            {'range': [0, 30], 'color': "green"},
                            {'range': [30, 70], 'color': "orange"},
                            {'range': [70, 100], 'color': "red"}
                        ],
                        'threshold': {
                            'line': {'color': "red", 'width': 4},
                            'thickness': 0.75,
                            'value': probability * 100
                        }
                    }
                ))
                fig.update_layout(height=300, margin=dict(l=20, r=20, t=50, b=20))
                st.plotly_chart(fig, use_container_width=True)
                
                # Risk classification
                if prediction == 1:
                    st.markdown("<div class='high-risk'>–í–ò–°–û–ö–ò–ô –†–ò–ó–ò–ö –í–Ü–î–¢–û–ö–£</div>", unsafe_allow_html=True)
                else:
                    st.markdown("<div class='low-risk'>–ù–ò–ó–¨–ö–ò–ô –†–ò–ó–ò–ö –í–Ü–î–¢–û–ö–£</div>", unsafe_allow_html=True)
            
            with cols[1]:
                st.subheader("–í–∞–∂–ª–∏–≤—ñ —Ñ–∞–∫—Ç–æ—Ä–∏")
                
                # Display factors affecting the prediction
                factors_data = {
                    '–§–∞–∫—Ç–æ—Ä': [
                        '–ó–∞–ª–∏—à–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É',
                        '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–æ—ó–≤',
                        '–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–í',
                        '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É',
                        '–í—ñ–∫ –ø—ñ–¥–ø–∏—Å–∫–∏'
                    ],
                    '–í–ø–ª–∏–≤': [
                        -0.5 * reamining_contract * 100,
                        0.05 * service_failure_count * 100,
                        -0.3 * (1 if is_tv_subscriber else 0) * 100,
                        0.1 * (1 if download_over_limit else 0) * 100,
                        -0.01 * subscription_age * 100
                    ]
                }
                
                df_factors = pd.DataFrame(factors_data)
                fig = px.bar(
                    df_factors, 
                    x='–í–ø–ª–∏–≤', 
                    y='–§–∞–∫—Ç–æ—Ä',
                    orientation='h',
                    color='–í–ø–ª–∏–≤',
                    color_continuous_scale=['green', 'yellow', 'red'],
                    range_color=[-50, 50]
                )
                fig.update_layout(height=300, margin=dict(l=20, r=20, t=20, b=20))
                st.plotly_chart(fig, use_container_width=True)
                
                # Recommendations
                st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
                if prediction == 1:
                    recommendations = []
                    if reamining_contract < 0.3:
                        recommendations.append("–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑ –∫—Ä–∞—â–∏–º–∏ —É–º–æ–≤–∞–º–∏")
                    if not is_tv_subscriber:
                        recommendations.append("–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –¢–í-–ø–∞–∫–µ—Ç –∑—ñ –∑–Ω–∏–∂–∫–æ—é")
                    if service_failure_count > 2:
                        recommendations.append("–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —è–∫–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥")
                    if bill_avg > 50:
                        recommendations.append("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞—Ä–∏—Ñ–Ω–∏–π –ø–ª–∞–Ω –∫–ª—ñ—î–Ω—Ç–∞")
                    
                    for rec in recommendations:
                        st.markdown(f"‚úÖ {rec}")
                else:
                    st.markdown("‚úÖ –ö–ª—ñ—î–Ω—Ç –º–∞—î –Ω–∏–∑—å–∫–∏–π —Ä–∏–∑–∏–∫ –≤—ñ–¥—Ç–æ–∫—É. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —è–∫—ñ—Å—Ç—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è.")
            
            st.markdown("</div>", unsafe_allow_html=True)
        else:
            st.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

with tab2:
    st.markdown("<h2 class='sub-header'>–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤</h2>", unsafe_allow_html=True)
    
    # Load sample data for demo visualizations
    try:
        df = pd.read_csv("data/internet_service_churn.csv")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Churn distribution
            fig = px.pie(
                df, 
                names='churn',
                title='–†–æ–∑–ø–æ–¥—ñ–ª –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤',
                color_discrete_sequence=px.colors.sequential.Blues_r,
                hole=0.4,
                labels={'0': '–ó–∞–ª–∏—à–∏–ª–∏—Å—å', '1': '–í—ñ–¥—Ç—ñ–∫'}
            )
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)
            
            # TV subscriber vs. churn
            tv_churn = df.groupby(['is_tv_subscriber', 'churn']).size().unstack().reset_index()
            tv_churn.columns = ['–¢–í-–ø—ñ–¥–ø–∏—Å–∫–∞', '–ó–∞–ª–∏—à–∏–ª–∏—Å—å', '–í—ñ–¥—Ç—ñ–∫']
            tv_churn['–¢–í-–ø—ñ–¥–ø–∏—Å–∫–∞'] = tv_churn['–¢–í-–ø—ñ–¥–ø–∏—Å–∫–∞'].map({0: '–ù–µ–º–∞—î', 1: '–Ñ'})
            fig = px.bar(
                tv_churn, 
                x='–¢–í-–ø—ñ–¥–ø–∏—Å–∫–∞', 
                y=['–ó–∞–ª–∏—à–∏–ª–∏—Å—å', '–í—ñ–¥—Ç—ñ–∫'],
                title='–í–ø–ª–∏–≤ –¢–í-–ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—ñ–¥—Ç—ñ–∫',
                barmode='group',
                color_discrete_sequence=['#1E88E5', '#E53935']
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Contract remaining vs. churn
            fig = px.scatter(
                df, 
                x='reamining_contract',
                y='bill_avg',
                color='churn',
                color_discrete_sequence=['#1E88E5', '#E53935'],
                opacity=0.7,
                title='–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É –≤—ñ–¥ –∑–∞–ª–∏—à–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Ç–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É'
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Service failures impact
            df_failures = df.groupby('service_failure_count')['churn'].mean().reset_index()
            df_failures.columns = ['–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–æ—ó–≤', '–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–¥—Ç—ñ–∫']
            fig = px.line(
                df_failures, 
                x='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–æ—ó–≤', 
                y='–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–¥—Ç—ñ–∫', 
                markers=True,
                title='–í–ø–ª–∏–≤ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–±–æ—ó–≤ –Ω–∞ –≤—ñ–¥—Ç—ñ–∫',
                color_discrete_sequence=['#E53935']
            )
            fig.update_layout(yaxis_range=[0, 1])
            st.plotly_chart(fig, use_container_width=True)
    
    except Exception as e:
        st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: {e}")
        st.info("–î–µ–º–æ-—Ä–µ–∂–∏–º: –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è –≤–∏–≥–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ")
        
        # Create sample data
        st.markdown("### –°–∏–º—É–ª—è—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó")
        
        # Synthetic charts
        col1, col2 = st.columns(2)
        with col1:
            labels = ['–ó–∞–ª–∏—à–∏–ª–∏—Å—å', '–í—ñ–¥—Ç—ñ–∫']
            values = [75, 25]
            fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4, marker_colors=['#1E88E5', '#E53935'])])
            fig.update_layout(title_text='–†–æ–∑–ø–æ–¥—ñ–ª –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤')
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            x = ['0-6 –º—ñ—Å—è—Ü—ñ–≤', '6-12 –º—ñ—Å—è—Ü—ñ–≤', '1-2 —Ä–æ–∫–∏', '2+ —Ä–æ–∫–∏']
            y = [0.42, 0.28, 0.15, 0.05]
            fig = go.Figure(data=[go.Bar(x=x, y=y, marker_color='#E53935')])
            fig.update_layout(title_text='–í—ñ–¥—Ç—ñ–∫ –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è')
            st.plotly_chart(fig, use_container_width=True)

# Footer
st.markdown("""
<div class='footer'>
    <p>¬© 2023 –¢–µ–ª–µ–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.</p>
    <p>–†–æ–∑—Ä–æ–±–ª–µ–Ω–æ —Å–ª—É–∂–±–æ—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –¥–∞–Ω–∏—Ö</p>
</div>
""", unsafe_allow_html=True)